"""Defines the structure of the state object passed between nodes in the LangGraph agent."""

from typing import TypedDict, List, Optional, Dict, Any, Tuple

# BaseMessage is the core type for messages (HumanMessage, AIMessage, ToolMessage etc.)
from langchain_core.messages import BaseMessage

# If using LangChain's standard tool calling format with Pydantic models for output
# from langchain_core.tools import ToolCall


class AgentState(TypedDict):
    """
    Represents the state of the AI agent during its execution flow.

    This dictionary is passed between nodes in the LangGraph, accumulating
    information and results as the agent processes a user request.

    Attributes:
        messages: The history of messages in the current conversation thread.
                  Managed by the checkpointer and updated by graph nodes.
        input: The latest message/query received from the user.
        user_role: The role of the user interacting with the agent (e.g., 'customer',
                   'support_tier_1', 'admin'). Used for RBAC in retrieval.
        retrieved_docs: Documents fetched from the knowledge base relevant to the input.
                        List of strings, where each string is the content of a chunk.
        generation: The raw text response generated by the language model.
        tool_calls: Parsed tool calls requested by the LLM (if any).
                    Often a list of dicts with 'name', 'args', and 'id'.
        tool_outputs: The results obtained after executing the requested tools.
                      The structure depends on the specific tool's return value.
        intermediate_steps: A list storing the sequence of actions (tool calls)
                            and their corresponding observations (tool outputs).
                            Often represented as List[Tuple[AgentAction, Any]].
    """
    messages: List[BaseMessage]
    input: str
    user_role: Optional[str]          # Added for RBAC filtering during retrieval
    retrieved_docs: Optional[List[str]]
    generation: Optional[str]
    # Standard LangChain tool calling structure often yields dicts
    # Can be replaced with List[ToolCall] if using Pydantic ToolCall model
    tool_calls: Optional[List[Dict[str, Any]]]
    tool_outputs: Optional[List[Any]] # Can be List[ToolMessage] or other structures
    # Classic LangChain agent intermediate steps format
    intermediate_steps: Optional[List[Tuple[Any, Any]]] # Typically AgentAction, observation 